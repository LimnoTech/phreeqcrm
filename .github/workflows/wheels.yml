name: wheels

on: [push, pull_request]

jobs:
  build_wheels:
    if: ${{ false }}
    name: ${{ matrix.python[0] }}(${{ matrix.buildplat[2] }}) on ${{ matrix.buildplat[0] }}
    runs-on: ${{ matrix.buildplat[0] }}
    strategy:
      fail-fast: false
      matrix:
        buildplat:
          - [macos-13, macosx_x86_64, x86_64]
          - [macos-14, macosx_arm64, arm64]
          - [ubuntu-20.04, manylinux_x86_64, x86_64]
          - [ubuntu-20.04, manylinux_i686, i686]
          - [windows-2019, win_amd64, x64]
          - [windows-2019, win32, Win32]
        python:
          - [cp38, v141]
          - [cp39, v141]
          - [cp310, v141]
          - [cp311, v141]
          - [cp312, v142]
          - [cp313, v142]
        exclude:
          - buildplat: [windows-2019, win_amd64, x64]
            python: [cp313, v142]
          - buildplat: [windows-2019, win32, Win32]
            python: [cp313, v142]

    steps:
      - uses: actions/checkout@v4

      # Used to host cibuildwheel
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Build wheels
        if: ${{ runner.os != 'Windows' }}
        uses: pypa/cibuildwheel@7e5a838a63ac8128d71ab2dfd99e4634dd1bca09  # v2.19.2
        env:
          CIBW_PRERELEASE_PYTHONS: True
          CIBW_BUILD: ${{ matrix.python[0] }}-${{ matrix.buildplat[1] }}
          # CIBW_BUILD_VERBOSITY: 1

      - name: Build wheels (Windows)
        if: ${{ runner.os == 'Windows' }}
        uses: pypa/cibuildwheel@7e5a838a63ac8128d71ab2dfd99e4634dd1bca09  # v2.19.2
        env:
          CIBW_PRERELEASE_PYTHONS: True
          CIBW_BUILD: ${{ matrix.python[0] }}-${{ matrix.buildplat[1] }}
          # CIBW_BUILD_VERBOSITY: 1
          # CMAKE_GENERATOR: Visual Studio 16 2019
          CMAKE_GENERATOR_TOOLSET: ${{ matrix.python[1] }}
          CMAKE_GENERATOR_PLATFORM: ${{ matrix.buildplat[2] }}

      - uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        with:
          name: ${{ matrix.python[0] }}-${{ matrix.buildplat[1] }}
          path: ./wheelhouse/*.whl


  build_sdist:
    name: Build sdist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@39cd14951b08e74b54015e9e001cdefcf80e669f # v5.1.1
        with:
          # Build sdist on lowest supported Python
          python-version: "3.8"
      - name: Build sdist
        run: |
          python -m pip install -U pip build
          python -m build --sdist
      # - name: Test the sdist
      #   run: |
      #     # TODO: Don't run test suite, and instead build wheels from sdist
      #     # Depends on pypa/cibuildwheel#1020
      #     python -m pip install dist/*.gz -Csetup-args=-Dallow-noblas=true
      #     pip install -r requirements/test_requirements.txt
      #     cd .. # Can't import numpy within numpy src directory
      #     python -c "import numpy, sys; print(numpy.__version__); sys.exit(numpy.test() is False)"

      # - name: Check README rendering for PyPI
      #   run: |
      #     python -mpip install twine
      #     twine check dist/*

      - uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        with:
          name: sdist
          path: ./dist/*

      # - uses: conda-incubator/setup-miniconda@a4260408e20b96e80095f42ff7f1a15b27dd94ca # v3.0.4
      #   with:
      #     # for installation of anaconda-client, required for upload to
      #     # anaconda.org
      #     # default (and activated) environment name is test
      #     # Note that this step is *after* specific pythons have been used to
      #     # build and test
      #     auto-update-conda: true
      #     python-version: "3.10"

      # - name: Upload sdist
      #   if: success()
      #   shell: bash -el {0}
      #   env:
      #     NUMPY_STAGING_UPLOAD_TOKEN: ${{ secrets.NUMPY_STAGING_UPLOAD_TOKEN }}
      #     # commented out so the sdist doesn't upload to nightly
      #     # NUMPY_NIGHTLY_UPLOAD_TOKEN: ${{ secrets.NUMPY_NIGHTLY_UPLOAD_TOKEN }}
      #   run: |
      #     conda install -y anaconda-client
      #     source tools/wheels/upload_wheels.sh
      #     set_upload_vars
      #     # trigger an upload to
      #     # https://anaconda.org/scientific-python-nightly-wheels/numpy
      #     # for cron jobs or "Run workflow" (restricted to main branch).
      #     # Tags will upload to
      #     # https://anaconda.org/multibuild-wheels-staging/numpy
      #     # The tokens were originally generated at anaconda.org
      #     upload_wheels